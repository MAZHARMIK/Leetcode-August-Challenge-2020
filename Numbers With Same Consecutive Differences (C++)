class Solution {
public:
    void DFS(int curr_digit, int max_length, int diff, int num, vector<int>& result, int curr_length) {
        if(curr_length == max_length) {
            result.push_back(num);
            return;
        }
        
        int next = curr_digit + diff;
        if(next < 10) {
            DFS(next, max_length, diff, (num*10)+next, result, curr_length+1);
        }
        
        next = curr_digit - diff;
        if(next >= 0 && diff != 0) { //diff = 0 will create duplicate. For example : 1  -> next = 1+0 = 1  and 1-0 = 1  
            DFS(next, max_length, diff, (num*10)+next, result, curr_length+1);
        }
    }
    
    vector<int> numsSameConsecDiff(int N, int K) {
        if(N == 1) {
            return {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        }
        vector<int> result;
        for(int i = 1; i<=9; i++) { //put i digit in start and do a dfs and produce all results of length N
            DFS(i, N, K, i, result, 1);
            //i = put i digit in start and move on further
            //N = max length of integer
            //K = difference
            //i = current value of your number
            //1 = current length of your number
        }
        
        return result;
    }
};
