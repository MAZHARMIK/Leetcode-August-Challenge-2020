class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int, int>> que;
        int freshCount = 0;
        for(int i = 0; i<grid.size(); i++) {
            for(int j = 0; j<grid[i].size(); j++) {
                if(grid[i][j] == 2) {
                    que.push({i, j});
                }
                else if(grid[i][j] == 1) {
                    freshCount++;
                }
            }
        }
        
        int time = 0;
        vector<pair<int, int>> directions{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        auto isSafe = [&](int x, int y) {
            return x>=0 && x<grid.size() && y>=0 && y<grid[x].size();
        };
        while(!que.empty()) {
            int n = que.size(); //because we want to cover all neighbours of a node at once which are affected in
            //a particular time frame
            while(n--) {
                pair<int, int> curr = que.front();
                que.pop();
                int i = curr.first;
                int j = curr.second;
                for(pair<int, int> dir:directions) {
                    int new_i = i + dir.first;
                    int new_j = j + dir.second;
                    if(isSafe(new_i, new_j) && grid[new_i][new_j] == 1) {
                        grid[new_i][new_j] = 2;
                        que.push({new_i, new_j});
                        freshCount--;
                    }
                }
            }
            if(!que.empty())
                time++;
        }
        
        return (freshCount==0)?time:-1;
    }
};
